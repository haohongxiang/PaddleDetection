_BASE_: [
    '../datasets/coco_instance.yml',
    '../runtime.yml',
    # '../cascade_rcnn/_base_/cascade_mask_rcnn_r50_fpn.yml',
    # './reader_swin.yml',
    './optimizer_swin_1x.yml',
]


weights: output/htc_swin_tiny_fpn_1x_coco_instaboost/model_final

snapshot_epoch: 4
log_iter: 100
convert_sync_bn: false


architecture: HybridTaskCascade


HybridTaskCascade:
  backbone: SwinTransformer
  neck: FPN
  rpn_head: RPNHead
  bbox_head: HybridTaskCascadeHead
  # mask_head: HybridTaskMaskHead
  fused_semantic_head: ~ # FusedSemanticHead
  # post process
  bbox_post_process: BBoxPostProcess
  mask_post_process: MaskPostProcess


SwinTransformer:
  embed_dim: 96
  depths: [2, 2, 6, 2]
  num_heads: [3, 6, 12, 24]
  window_size: 7
  ape: false
  drop_path_rate: 0.1
  patch_norm: true
  out_indices: [0, 1, 2, 3]
  pretrained: https://paddledet.bj.bcebos.com/models/pretrained/swin_tiny_patch4_window7_224.pdparams



FPN:
  out_channel: 256

RPNHead:
  anchor_generator:
    aspect_ratios: [0.5, 1.0, 2.0]
    anchor_sizes: [[32], [64], [128], [256], [512]]
    strides: [4, 8, 16, 32, 64]
  rpn_target_assign:
    batch_size_per_im: 256
    fg_fraction: 0.5
    negative_overlap: 0.3
    positive_overlap: 0.7
    use_random: True
  train_proposal:
    min_size: 0.0
    nms_thresh: 0.7
    pre_nms_top_n: 2000
    post_nms_top_n: 2000
    topk_after_collect: True
  test_proposal:
    min_size: 0.0
    nms_thresh: 0.7
    pre_nms_top_n: 1000
    post_nms_top_n: 1000
  smoothl1loss: True
  smoothl1lossbetanume: 1.0
  smoothl1lossbetadeno: 9.0


HybridTaskCascadeHead:
  head: HybridTaskCascadeTwoFCHead
  # head: HybridTaskCascadeXConvNormHead

  roi_extractor:
    resolution: 7
    sampling_ratio: 0
    aligned: True

  # semantic_roi_extractor:
  #   resolution: 14
  #   sampling_ratio: 0
  #   aligned: True

  bbox_assigner: BBoxAssigner
  mask_head: HybridTaskMaskHead
  smoothl1loss: True
  smoothl1lossbetanume: 1.0
  smoothl1lossbetadeno: 1.0

BBoxAssigner:
  batch_size_per_im: 512
  bg_thresh: 0.5
  fg_thresh: 0.5
  fg_fraction: 0.25
  cascade_iou: [0.5, 0.6, 0.7]
  use_random: True


HybridTaskCascadeTwoFCHead:
  out_channel: 1024


# HybridTaskCascadeXConvNormHead:
#   num_convs: 4
#   norm_type: 'gn'
#   out_channel: 1024


BBoxPostProcess:
  decode:
    name: RCNNBox
    prior_box_var: [30.0, 30.0, 15.0, 15.0]
  nms:
    name: MultiClassNMS
    keep_top_k: 100
    # score_threshold: 0.05
    score_threshold: 0.001
    nms_threshold: 0.5


HybridTaskMaskHead:
  head: HybridTaskMaskFeat
  roi_extractor:
    resolution: 14
    sampling_ratio: 0
    aligned: True
  semantic_roi_extractor:
    resolution: 14
    sampling_ratio: 0
    aligned: True
  mask_assigner: MaskAssigner
  share_bbox_feat: False

MaskFeat:
  num_convs: 4
  out_channel: 256

MaskAssigner:
  mask_resolution: 28

MaskPostProcess:
  binary_thresh: 0.5

# FusedSemanticHead:
#   semantic_num_class: 80
#   loss_weight: 0.2






worker_num: 2
TrainReader:
  sample_transforms:
  # - Decode: {}
  - Instaboost: {}
  # - RandomResizeCrop: {resizes: [400, 500, 600], cropsizes: [[384, 600], ], prob: 0.5}
  - RandomResize: {target_size: [[480, 1333], [512, 1333], [544, 1333], [576, 1333], [608, 1333], [640, 1333], [672, 1333], [704, 1333], [736, 1333], [768, 1333], [800, 1333]], keep_ratio: True, interp: 2}
  # - RandomDistort: {}
  # - RandomResize: {target_size: [[400, 1600], [432, 1600], [464, 1600], [496, 1600], [528, 1600], [560, 1600], [592, 1600], [624, 1600], [656, 1600], [688, 1600], [720, 1600], [752, 1600], [784, 1600], [816, 1600], [848, 1600], [880, 1600], [912, 1600], [944, 1600], [976, 1600], [1008, 1600], [1040, 1600], [1072, 1600], [1104, 1600], [1136, 1600], [1168, 1600], [1200, 1600], [1232, 1600], [1264, 1600], [1296, 1600], [1328, 1600], [1360, 1600], [1392, 1600], [1440, 1600]], keep_ratio: True, interp: 2}

  - RandomFlip: {prob: 0.5}
  - NormalizeImage: {is_scale: true, mean: [0.485,0.456,0.406], std: [0.229, 0.224,0.225]}
  - Permute: {}

  batch_transforms:
  - PadBatch: {pad_to_stride: 32}
  # - SegRescale: {scale_factor: 0.125}

  instaboost_epoch: 100000
  batch_size: 1
  shuffle: true
  drop_last: true
  collate_batch: false


EvalReader:
  sample_transforms:
  - Decode: {}
  # - Resize: {interp: 2, target_size: [1400, 1600], keep_ratio: True}
  - Resize: {interp: 1, target_size: [800, 1333], keep_ratio: True}
  - NormalizeImage: {is_scale: true, mean: [0.485,0.456,0.406], std: [0.229, 0.224,0.225]}
  - Permute: {}
  batch_transforms:
  - PadBatch: {pad_to_stride: 32}
  batch_size: 1
  shuffle: false
  drop_last: false
  drop_empty: false
