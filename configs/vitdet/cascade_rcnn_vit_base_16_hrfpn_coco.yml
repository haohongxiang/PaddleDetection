_BASE_: [
  '../datasets/coco_detection.yml',
  '../runtime.yml',
  # '_base_/optimizer_1x.yml',
  # '_base_/cascade_rcnn_r50_fpn.yml',
  # '_base_/cascade_fpn_reader.yml',
  '../faster_rcnn/_base_/faster_rcnn_swin_reader.yml',

]
weights: output/cascade_rcnn_vit_base_16_hrfpn_coco/model_final

snapshot_epoch: 1

use_gpu: true
norm_type: sync_bn
find_unused_parameters: True


# 1x optimizer
epoch: 12
base_lr: 0.0003
milestones: [8, 11]
warmup_iters: 2000 # 2 x 8 500
warmup_ratio: 0.001


weight_decay: 0.05
layer_decay: 0.75


worker_num: 2
TrainReader:
  batch_size: 1



architecture: CascadeRCNN

CascadeRCNN:
  backbone: VisionTransformer
  neck: HRFPN
  rpn_head: RPNHead
  bbox_head: CascadeHead
  # post process
  bbox_post_process: BBoxPostProcess


VisionTransformer:
  patch_size: 16
  embed_dim: 768
  depth: 12
  num_heads: 12
  mlp_ratio: 4
  qkv_bias: True
  drop_rate: 0.0
  drop_path_rate: 0.2 # 0.1
  init_values: 0.1
  final_norm: False
  use_rel_pos_bias: False #
  use_sincos_pos_emb: True
  epsilon: 0.000001 # 1e-6
  out_indices: [3, 5, 7, 11]
  pretrained: ../params/init.params

HRFPN:
  out_channel: 256
  use_bias: True

RPNHead:
  anchor_generator:
    aspect_ratios: [0.5, 1.0, 2.0]
    anchor_sizes: [[32], [64], [128], [256], [512]]
    strides: [4, 8, 16, 32, 64]
  rpn_target_assign:
    batch_size_per_im: 256
    fg_fraction: 0.5
    negative_overlap: 0.3
    positive_overlap: 0.7
    use_random: True
  train_proposal:
    min_size: 0.0
    nms_thresh: 0.7
    pre_nms_top_n: 2000
    post_nms_top_n: 2000 # 1000
    topk_after_collect: True
  test_proposal:
    min_size: 0.0
    nms_thresh: 0.7
    pre_nms_top_n: 1000
    post_nms_top_n: 1000


CascadeHeadL:
  head: CascadeXConvNormHead
  roi_extractor:
    resolution: 7
    sampling_ratio: 0
    aligned: True
  bbox_assigner: BBoxAssigner
  bbox_loss: GIoULoss
  num_cascade_stages: 3
  bbox_weight: [[10., 10., 5., 5.], [20.0, 20.0, 10.0, 10.0], [30.0, 30.0, 15.0, 15.0]]


BBoxAssigner:
  batch_size_per_im: 512
  bg_thresh: 0.5
  fg_thresh: 0.5
  fg_fraction: 0.25
  cascade_iou: [0.5, 0.6, 0.7]
  use_random: True

# CascadeTwoFCHead:
#   out_channel: 1024

CascadeXConvNormHead:
    norm_type: bn

GIoULoss:
  loss_weight: 10.
  reduction: 'mean'


BBoxPostProcess:
  decode:
    name: RCNNBox
    prior_box_var: [30.0, 30.0, 15.0, 15.0] #
  nms:
    name: MultiClassNMS
    keep_top_k: 100
    score_threshold: 0.05
    nms_threshold: 0.5

# 0.033, 0.033, 0.067, 0.067
# https://github.com/open-mmlab/mmdetection/blob/master/mmdet/core/bbox/coder/delta_xywh_bbox_coder.py
